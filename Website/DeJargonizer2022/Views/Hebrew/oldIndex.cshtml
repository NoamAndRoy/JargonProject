@model JargonProject.Models.ArticleGradingInfo

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    string result = string.Empty,
    common = string.Empty,
    normal = string.Empty,
    rare = string.Empty,
    score = string.Empty,
    numOfWords = string.Empty;

    if (Model != null)
    {
        if (Model.Error != null)
        {
            result = Model.Error;
        }
        else
        {
            System.Text.StringBuilder text = new System.Text.StringBuilder();

            foreach (string word in Model.Words)
            {
                string cleanedWord = JargonProject.Handlers.TextGrading.CleanWord(word).ToLower();
                string type = "commonWord";

                if (Model.RareWords.Contains(cleanedWord))
                {
                    type = "rareWord";
                }
                else if (Model.NormalWords.Contains(cleanedWord))
                {
                    type = "normalWord";
                }

                text.AppendFormat("<span class='{0}'>{1}</span>", type, word == "\r\n" ? "<br />" : word);
            }

            result = text.ToString();

            common = string.Format("{0}%, {1}", Math.Round((double)Model.CommonWords.Count / Model.CleanedWords.Count * 100), Model.CommonWords.Count);
            normal = string.Format("{0}%, {1}", Math.Round((double)Model.NormalWords.Count / Model.CleanedWords.Count * 100), Model.NormalWords.Count);
            rare = string.Format("{0}%, {1}", Math.Round((double)Model.RareWords.Count / Model.CleanedWords.Count * 100), Model.RareWords.Count);
            score = string.Format("{0}", Math.Round(100 - ((Model.NormalWords.Count * 0.5f + Model.RareWords.Count) * 100 / Model.CleanedWords.Count)).ToString());
            numOfWords = string.Format("{0}", Model.CleanedWords.Count.ToString());

            <script>
                $(document).ready(function () {
                    $(document).scrollTop($('#resultDiv').position().top);
                });
            </script>
        }
    }
}
<link href='@(Url.Content("~/Content/TextGrading.css") + "?v=" + Guid.NewGuid().ToString())' rel='stylesheet' type='text/css' />

<section id="textGradingSection">
    <h1 id="textGradingSectionTitle" class="sectionTitle">De-Jargonizer</h1>
    @using (Html.BeginForm("Index", "Hebrew", FormMethod.Post, new { id = "textGradingForm", enctype = "multipart/form-data" }))
    {
        <fieldset>
            <legend>Article</legend>
            <input type="file" id="ArticleFU" name="ArticleFU" draggable="true" placeholder="" multiple="multiple" value="HH"/>
            <p id="textManual">You can also insert the text manually:</p>
            <textarea id="ContentTA" name="ContentTA" class="input-group-sm"></textarea>
        </fieldset>
        <fieldset>
            <button type="submit" id="gradeTextBtn" class="btn btn-primary btn-block btn-lg">Start</button>
        </fieldset>
    }
    <div id="resultDiv">
        <fieldset>
            <legend>Result</legend>
            <div id="statDiv">
                <div>
                    <span class="resultSpan">Common:</span>
                    <span class="stat">@common</span>
                </div>
                <div>
                    <span class="resultSpan">Mid-Frequency:</span>
                    <span class="stat">@normal</span>
                </div>
                <div>
                    <span class="resultSpan">Rare:</span>
                    <span class="stat">@rare</span>
                </div>
                <div>
                    <span class="resultSpan">Score:</span>
                    <span class="stat">@score</span>
                </div>
                <div>
                    <span class="resultSpan">Number Of Words:</span>
                    <span class="stat">@numOfWords</span>
                </div>
                @if (Model != null)
                {
                <div>
                    @using (Html.BeginForm("Download", "Hebrew", FormMethod.Post, new { id = "downloadForm", enctype = "multipart/form-data" }))
                    {
                        TempData["articleInfo"] = Model;
                        <input type="submit" value="Download" id="downloadBtn" name="downloadBtn" class="btn btn-primary btn-block btn-lg" />
                    }
                </div>
                }
            </div>
            <div id="resultsContent" name="resultsContent" class="input-group-sm">@Html.Raw(result)</div>
        </fieldset>
    </div>
</section>